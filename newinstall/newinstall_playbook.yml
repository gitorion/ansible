---
- name: newinstall playbook
  hosts: all
  become: true
  vars_files:
    - vars/default.yml  
  tasks:

  # Check if distro is supported

    - name: End the play for hosts that are not supported
      fail:
        msg: Sorry this distribution {{ ansible_distribution }} is currently not supported for running this playbook.
      when: ansible_distribution != 'Debian' and ansible_distribution != 'CentOS' and ansible_distribution != 'Ubuntu' and ansible_distribution != 'Red Hat Enterprise Linux' and ansible_distribution != 'AlmaLinux' and ansible_distribution != 'Fedora' and ansible_distribution != 'RedHat' and ansible_distribution != 'Linux Mint'

  # Upgrade older system packages

    - name: apt upgrade for older distributions
      ansible.builtin.apt:
        state: latest
        name: "{{ item }}"
      with_items:
        - python3
      when: ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu' or ansible_distribution == 'Linux Mint'
  
    - name: dnf upgrade for older distributions
      ansible.builtin.yum:
        state: latest
        name: "{{ item }}"
      with_items:
        - dnf
        - dnf-plugins-core
      when: ansible_distribution == 'CentOS' or ansible_distribution == 'Red Hat Enterprise Linux' or ansible_distribution == 'Fedora' or ansible_distribution == 'RedHat' or ansible_distribution == 'AlmaLinux'

  # Local machine configure

  #  - name: Add entry to local machine hosts file
  #    ansible.builtin.lineinfile:
  #      path: /etc/hosts
  #      state: present
  #      search_string: '{{ hostname }}'
  #      line: '{{ ip }}   {{ hostname }}'
  #    delegate_to: localhost

  # Update system packages

    - name: Update system packages
      ansible.builtin.apt:
        upgrade: yes
        update_cache: yes
        cache_valid_time: 3600
        state: latest
      when: ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu' or ansible_distribution == 'Linux Mint'

    - name: Update system packages
      ansible.builtin.dnf:
        name: "*"
        update_cache: yes
        state: latest
        skip_broken: yes
      when: ansible_distribution == 'CentOS' or ansible_distribution == 'Red Hat Enterprise Linux' or ansible_distribution == 'Fedora' or ansible_distribution == 'RedHat' or ansible_distribution == 'AlmaLinux'

  # Install specified packages
 
    - name: Add specified repositories in dnf
      ansible.builtin.dnf:
        name: epel-release,elrepo-release
        state: latest
        skip_broken: yes
      when: ansible_distribution == 'CentOS' or ansible_distribution == 'Red Hat Enterprise Linux' or ansible_distribution == 'RedHat' or ansible_distribution == 'AlmaLinux'

    - name: Check GnuPG is installed
      ansible.builtin.apt:
        name: gnupg2
        state: latest
      when: ansible_distribution == 'Debian' or ansible_distribution == 'Linux Mint' or ansible_distribution == 'Ubuntu'

    - name: Download Docker public key
      ansible.builtin.apt_key:
        url: https://download.docker.com/linux/ubuntu/gpg
        state: present
      when: ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu' or ansible_distribution == 'Linux Mint'

    - name: Add docker repositories in apt      
      ansible.builtin.apt_repository:
        repo: deb https://download.docker.com/linux/ubuntu jammy stable
        state: present
        validate_certs: true
      when: ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu' or ansible_distribution == 'Linux Mint'

    - name: Add specified repositories in apt      
      ansible.builtin.apt_repository:
        repo: deb http://deb.debian.org/debian buster-backports main contrib non-free
        state: present
      when: ansible_distribution == 'Debian'

    - name: Installing required system packages apt
      ansible.builtin.apt:
        name: "{{ sys_packages_1 }}"
        state: latest
      when: ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu' or ansible_distribution == 'Linux Mint'

    - name: Installing required system packages dnf
      ansible.builtin.dnf:
        name: "{{ sys_dnf_packages }}"
        state: latest
        skip_broken: yes
      when: ansible_distribution == 'CentOS' or ansible_distribution == 'Red Hat Enterprise Linux' or ansible_distribution == 'RedHat' or ansible_distribution == 'AlmaLinux'

    - name: Installing required system packages dnf
      ansible.builtin.dnf:
        name: "{{ sys_fedora_dnf_packages }}"
        state: latest
        skip_broken: yes
      when: ansible_distribution == 'Fedora'

   # Install Docker and additional packages

    - name: Update system packages
      ansible.builtin.apt:
        upgrade: yes
        update_cache: yes
        cache_valid_time: 3600
        state: latest
      when: ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu' or ansible_distribution == 'Linux Mint'

    - name: Installing required additional system packages apt
      ansible.builtin.apt:
        name: "{{ sys_packages_2 }}"
        state: latest
      when: ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu' or ansible_distribution == 'Linux Mint'

    - name: Check Docker is active
      ansible.builtin.service:
        name: docker
        state: started
        enabled: true
      when: ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu' or ansible_distribution == 'Linux Mint'
    
    - name: Ensure group "docker" exists
      ansible.builtin.group:
        name: docker
        state: present
      when: ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu' or ansible_distribution == 'Linux Mint'

  # UFW Setup
  
    - name: Reset ufw
      community.general.ufw:
        state: reset

    - name: Set ufw ssh port to limit
      community.general.ufw:
        rule: limit
        port: ssh
        proto: tcp
        comment: allow ssh with limit
      no_log: true

    - name: Enable ufw
      community.general.ufw:
        state: enabled
        logging: on
  
  ## UFW ports for MINTAKA (mailinabox)

    # - name: Allowing selected ufw tcp incoming
    #   community.general.ufw:
    #     rule: allow
    #     proto: tcp
    #     direction: in
    #     port: '{{ item }}'
    #   loop:
    #     - http
    #     - https
    #     - git
    #     - 53
    #     - 9100
    #     - 25
    #     - 465
    #     - 587
    #     - 993
    #     - 995
    #     - 4190
    #   no_log: true

    # - name: Allowing selected ufw udp incoming
    #   community.general.ufw:
    #     rule: allow
    #     proto: udp
    #     direction: in
    #     port: '{{ item }}'
    #   loop:
    #     - 53
    #   no_log: true

    # - name: Allowing selected ufw tcp outgoing
    #   community.general.ufw:
    #     rule: allow
    #     proto: tcp
    #     direction: out
    #     port: '{{ item }}'
    #   loop:
    #     - http
    #     - https
    #     - 22
    #     - 53
    #     - 9100
    #     - 25
    #     - 465
    #     - 993
    #     - 995
    #     - 4190
    #   no_log: true
      
    # - name: Allowing selected ufw udp outgoing
    #   community.general.ufw:
    #     rule: allow
    #     proto: udp
    #     direction: out
    #     port: '{{ item }}'
    #   loop:
    #     - 53
    #   no_log: true

## UFW ports for PLUTO (web server)

    - name: Allowing selected ufw tcp incoming
      community.general.ufw:
        rule: allow
        proto: tcp
        direction: in
        port: '{{ item }}'
      loop:
        - http
        - https
        - git
        - 53
        - 9100
      no_log: true

    - name: Allowing selected ufw udp incoming
      community.general.ufw:
        rule: allow
        proto: udp
        direction: in
        port: '{{ item }}'
      loop:
        - 53
      no_log: true

    - name: Allowing selected ufw tcp outgoing
      community.general.ufw:
        rule: allow
        proto: tcp
        direction: out
        port: '{{ item }}'
      loop:
        - http
        - https
        - 22
        - 53
        - 9100
      no_log: true
      
    - name: Allowing selected ufw udp outgoing
      community.general.ufw:
        rule: allow
        proto: udp
        direction: out
        port: '{{ item }}'
      loop:
        - 53
      no_log: true


  ## UFW ports for VEGA (wireguard)

    # - name: Allowing selected ufw tcp incoming
    #   community.general.ufw:
    #     rule: allow
    #     proto: tcp
    #     direction: in
    #     port: '{{ item }}'
    #   loop:
    #     - http
    #     - https
    #     - git
    #     - 53
    #     - 9100
    #   no_log: true

    # - name: Allowing selected ufw udp incoming
    #   community.general.ufw:
    #     rule: allow
    #     proto: udp
    #     direction: in
    #     port: '{{ item }}'
    #   loop:
    #     - 80
    #     - 443
    #     - 53
    #     - 54545
    #   no_log: true

    # - name: Allowing selected ufw tcp outgoing
    #   community.general.ufw:
    #     rule: allow
    #     proto: tcp
    #     direction: out
    #     port: '{{ item }}'
    #   loop:
    #     - http
    #     - https
    #     - 22
    #     - 53
    #     - 9100
    #   no_log: true
      
    # - name: Allowing selected ufw udp outgoing
    #   community.general.ufw:
    #     rule: allow
    #     proto: udp
    #     direction: out
    #     port: '{{ item }}'
    #   loop:
    #     - 53
    #   no_log: true

  ### End of ports section for ufw
           
    - name: Set ufw incoming policy
      community.general.ufw:
        default: deny
        direction: incoming

    - name: Set ufw outgoing policy
      community.general.ufw:
        default: deny
        direction: outgoing

    - name: Enable ufw to run from start-up
      ansible.builtin.command: sudo systemctl enable ufw
      when: ansible_distribution == 'CentOS' or ansible_distribution == 'Red Hat Enterprise Linux' or ansible_distribution == 'Fedora' or ansible_distribution == 'RedHat' or ansible_distribution == 'AlmaLinux'

  # Set specified hostname

    - name: Set required hostname from specified
      ansible.builtin.command: "{{ item }}"
      with_items:
        - hostnamectl set-hostname "{{ hostname }}"
        - hostnamectl set-hostname """{{ hostname }}""" --pretty
        - hostnamectl set-hostname "{{ hostname }}" --static
        - hostnamectl set-hostname "{{ hostname }}" --transient

    - name: Replace localhost entry to include specified hostname
      ansible.builtin.lineinfile:
        path: /etc/hosts
        search_string: '127.0.1.1'
        line: '127.0.1.1 {{ hostname }}'
        owner: root
        group: root
        mode: '0644'

  # Sudo group create

    - name: Make a sudo group if it is not already present 
      ansible.builtin.group:
        name: sudo
        state: present
      when: ansible_distribution == 'CentOS' or ansible_distribution == 'Red Hat Enterprise Linux' or ansible_distribution == 'Fedora' or ansible_distribution == 'RedHat' or ansible_distribution == 'AlmaLinux'

    - name: Make an entry in sudoers file for the sudo group
      ansible.builtin.lineinfile:
        path: /etc/sudoers
        state: present
        line: '%sudo	ALL=(ALL)	ALL'
      when: ansible_distribution == 'CentOS' or ansible_distribution == 'Red Hat Enterprise Linux' or ansible_distribution == 'Fedora' or ansible_distribution == 'RedHat' or ansible_distribution == 'AlmaLinux'

  # New user prerequisites

    - name: Remove login banner in skel for new users
      ansible.builtin.command: touch /etc/skel/.hushlogin

    - name: Check profile file exists
      stat:
        path: /etc/skel/.profile
      register: stat_result

    - name: Create profile file in skel for new users
      ansible.builtin.file:
        path: /etc/skel/.profile
        state: touch
      when: (not stat_result.stat.exists and ansible_distribution == 'Debian') or
            (not stat_result.stat.exists and ansible_distribution == 'Ubuntu') or
            (not stat_result.stat.exists and ansible_distribution == 'Linux Mint')

    - name: Add mystart script entry to skel profile for new users
      ansible.builtin.lineinfile:
        path: /etc/skel/.profile
        state: present
        line: 'python3 /opt/scripts/my_start/mystart.py'
      when: ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu' or ansible_distribution == 'Linux Mint'

    - name: Check zlogin file exists
      stat:
        path: /etc/skel/.zlogin
      register: stat_result
 
    - name: Create zlogin file in skel for new users
      ansible.builtin.file:
        path: /etc/skel/.zlogin
        state: touch
      when: not stat_result.stat.exists

    - name: Add mystart script entry to skel zlogin for new users
      ansible.builtin.lineinfile:
        path: /etc/skel/.zlogin
        state: present
        line: 'python3 /opt/scripts/my_start/mystart.py'

    - name: Add mystart script entry to skel bashrc for new users
      ansible.builtin.lineinfile:
        path: /etc/skel/.bashrc
        state: present
        line: 'python3 /opt/scripts/my_start/mystart.py'
      when: ansible_distribution == 'CentOS' or ansible_distribution == 'Red Hat Enterprise Linux' or ansible_distribution == 'Fedora' or ansible_distribution == 'RedHat' or ansible_distribution == 'AlmaLinux'

  # New user(s) and ssh key setup

    - name: Create new user(s) with the specified name(s) and grant sudo privileges if specified
      ansible.builtin.user:
        name: "{{ create_user }}"
        password: "{{ password }}"
        state: present
        groups: sudo,docker
        append: yes
        create_home: true
        shell: /bin/bash

    - name: Input ssh authorized key(s) for the new user(s)
      ansible.posix.authorized_key:
        user: "{{ create_user }}"
        state: present
        key: '{{ item }}'
      with_items:
        - "{{ copy_local_key }}"
      no_log: true

  # Wireguard vpn set up

    # - name: Create/check directory for Wireguard
    #   ansible.builtin.file:
    #     path: /etc/wireguard
    #     owner: root
    #     group: sudo
    #     state: directory
    #     mode: 0770
           
    # - name: Clone wireguard repo from git
    #   ansible.builtin.git:
    #     repo: https://github.com/gitorion/wireguard.git
    #     dest: /etc/wireguard/
    #     clone: yes
    #     version: main

    # - name: Wireguard key-generate
    #   ansible.builtin.shell: wg genkey | sudo tee /etc/wireguard/privatekey | wg pubkey | sudo tee /etc/wireguard/publickey

    # - name: Wireguard config file key-collect
    #   ansible.builtin.shell: cat /etc/wireguard/privatekey
    #   register: private_key
    #   no_log: true

    # - name: Wireguard config file key-collect
    #   ansible.builtin.shell: cat /etc/wireguard/publickey
    #   register: public_key
    #   no_log: true

    # - name: Wireguard client config file create
    #   ansible.builtin.lineinfile:
    #     path: /etc/wireguard/client.conf
    #     state: present
    #     regexp: '^#?PrivateKey = <clients private key here>'
    #     line: 'PrivateKey = {{ private_key.stdout }}'
    #   no_log: true

    # - name: Wireguard server config file create
    #   ansible.builtin.lineinfile:
    #     path: /etc/wireguard/vpn.conf
    #     state: present
    #     regexp: '^#?PrivateKey = <server private key here>'
    #     line: 'PrivateKey = {{ private_key.stdout }}'
    #   no_log: true

    # - name: Wireguard server config file create
    #   ansible.builtin.lineinfile:
    #     path: /etc/wireguard/client.conf
    #     state: present
    #     regexp: '^#?PublicKey = <servers public key here>'
    #     line: 'PublicKey = {{ public_key.stdout }}'
    #   no_log: true

    # - name: Set ownership/permissions of wireguard keys for security
    #   ansible.builtin.file:
    #     path: /etc/wireguard/privatekey
    #     owner: root
    #     group: sudo
    #     state: file
    #     mode: 0600

    # - name: Set ownership/permissions of wireguard keys for security
    #   ansible.builtin.file:
    #     path: /etc/wireguard/publickey
    #     owner: root
    #     group: sudo
    #     state: file
    #     mode: 0644

    # - name: Set ownership/permissions of wireguard config file for security
    #   ansible.builtin.file:
    #     path: /etc/wireguard/client.conf
    #     owner: root
    #     group: sudo
    #     state: file
    #     mode: 0660

  # Mystart set-up

    - name: Clone scripts from git
      ansible.builtin.git:
        repo: https://github.com/gitorion/scripts.git
        dest: /opt/scripts
        clone: yes
        version: main

    - name: Copy mystart-scraper Service file to systemd
      ansible.builtin.copy:
        src: /opt/scripts/my_start/mystart-scraper.service
        dest: /etc/systemd/system/mystart-scraper.service
        remote_src: true

    - name: Set ownership of cloned my_start script files
      ansible.builtin.file:
        path: /opt/scripts
        owner: root
        group: sudo
        state: directory
        recurse: yes
        mode: u=rwx,g=rwx,o=rx

  # System reboot

    - name: Rebooting the system to complete updates
      reboot:

  # Enable mystart-scraper Service

    - name: Enable mystart-scraper Service
      ansible.builtin.service:
        name: mystart-scraper
        state: started
        enabled: true

  # System security measures

    - name: Disable root login shell
      ansible.builtin.lineinfile:
        path: /etc/passwd
        state: present
        regexp: '^#?root:x:0:0:root:/root:'
        line: 'root:x:0:0:root:/root:/sbin/nologin'

    - name: Disable ssh root login
      ansible.builtin.lineinfile:
        path: /etc/ssh/sshd_config
        state: present
        regexp: '^#?PermitRootLogin'
        line: 'PermitRootLogin no'

    - name: Disable ssh password authentication
      ansible.builtin.lineinfile:
        path: /etc/ssh/sshd_config
        state: present
        regexp: '^#?PasswordAuthentication'
        line: 'PasswordAuthentication no'

    - name: Disable ssh login banner
      ansible.builtin.lineinfile:
        path: /etc/pam.d/sshd
        state: present
        regexp: '^#?session    optional     pam_motd.so  motd=/run/motd.dynamic'
        line: '#session    optional     pam_motd.so  motd=/run/motd.dynamic'

    - name: Diable ssh login banner update task
      ansible.builtin.lineinfile:
        path: /etc/pam.d/sshd
        state: present
        regexp: '^#?session    optional     pam_motd.so noupdate'
        line: '#session    optional     pam_motd.so noupdate'

    - name: Change banner permissions to prevent change
      ansible.builtin.file:
        path: /etc/update-motd.d/
        state: directory
        owner: root
        group: root
        mode: '0600'

  # Restart the sshd service to enable changes

    - name: Restart the sshd service
      ansible.builtin.command: systemctl restart sshd
